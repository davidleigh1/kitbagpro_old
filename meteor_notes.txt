SUBLIME

Exclude folder from Find
-*/.meteor/*




===================================================================
READING LIST

http://guide.meteor.com/collections.html
http://guide.meteor.com/structure.html



===================================================================
https://www.meteor.com/tutorials/blaze/collections


== Getting Started

Open the CMD window - make sure it is the Admin version!
In the folder level above, enter the following:

meteor create kitbag

== ITERATING OVER OBJECT

		{{#each resolutions}}
			{{> resolution}}
		{{/each}}


== Storing tasks in a collection

* Collections are Meteor's way of storing persistent data.
* Creating a new collection is as easy as calling...

MyCollection = new Mongo.Collection("my-collection");

...in your JavaScript.

== Inserting tasks from the server-side database console

* Items inside collections are called documents.
* In a new terminal tab, go to your app directory and type:

	meteor mongo

Clears your DB

	meteor reset


== List all DBs and Collections ===========

http://stackoverflow.com/questions/24985684/mongodb-show-all-contents-from-all-collections

	show dbs
	use <db name>
	show collections

choose your collection and type the following to see all contents of that collection:

	db.collectionName.find()

MongoDB Quick Reference Guide - http://docs.mongodb.org/manual/reference/mongo-shell/


== List all DBs and Collections ===========

	db.tasks.insert({ text: "Hello world!", createdAt: new Date() });
	db.resolutions.insert({ title: "Hello Mongo Resolutions", createdAt: new Date() });

	db.orgs.find({_id:"LwQdKnvGmk42g67XY"})

DELETE ALL RECORDS

	db.kitbags.remove({});

UPDATE FIELD NAMES

	db.kitbags.update({}, {$rename:{"kitbagAssocOrgs":"kitbagAssocOrg"}}, false, true);

UPDATE VALUES

	db.orgs.update({ _id: "LwQdKnvGmk42g67XY" },{ $set: { orgId: "kb_be44df86cb2f" } })
	db.orgs.update({ _id: "ByA4SG4ceRakkGPkN" },{ $push: { orgAssocKitbags2: "newbag3" } })

	db.kitbags.update({ "kitbagId" : "2470f6c15924e130" },{ $set: { kitbagAssocOrg: "1221b0b44cbad5b4" } })
	db.kitbags.update({ "kitbagId" : "247007d1bcde59bf" },{ $set: { kitbagAssocOrg: "1221b0b44cbad5b4" } })
	db.orgs.find({orgTitle: /mda/i})
	db.orgs.update({orgTitle: /mda/i},{ $set: { orgId: "1221b0b44cbad5b4" } })

	db.orgs.update({
		orgId:"12218bbb4b509896"
	},{
		$set: {
			orgDesc: "National Disaster Victim Identification Organization supported by voluntary community emergency response teams across Israel. ZAKA (Hebrew: זקא‎‎, abbreviation for Zihuy Korbanot Ason, Hebrew: זיהוי קרבנות אסון, literally: Disaster Victim Identification), is a series of voluntary community emergency response teams in Israel, each operating in a police district (two in the Central District due to geographic considerations)."
		}
	})


== Attaching events to templates

* Event listeners are added to templates in much the same way as helpers are: by calling Template.templateName.events(...) with a dictionary.
* The keys describe the event to listen for, and the values are event handlers that are called when the event happens.

== Updating data in a collection

The 'update' function on a collection takes two arguments. The first is a selector that identifies a subset of the collection, and the second is an update parameter that specifies what should be done to the matched objects.

== Removing data in a collection

The 'remove' function takes one argument, a selector that determines which item to remove from the collection.

RUNNING ON MOBILE

[ ] https://www.meteor.com/tutorials/blaze/running-on-mobile

== SESSION

Session is a reactive data store for the client

== DEPLOY TO METEOR.COM

meteor deploy kitbagpro.meteor.com

== User Accounts

meteor add accounts-ui accounts-password

* https://www.meteor.com/tutorials/blaze/adding-user-accounts

== PACKAGES

> List the installed packages
meteor list


== Security with methods

In Meteor, the best way to do this is by declaring methods. Instead of the client code directly calling insert, update, and remove, it will instead call methods that will check if the user is authorized to complete the action and then make any changes to the database on the client's behalf.

meteor remove insecure

== Filtering data with publish and subscribe

https://www.meteor.com/tutorials/blaze/publish-and-subscribe
https://www.youtube.com/watch?v=LY8jYd_lWmw&index=18&list=PLLnpHn493BHECNl9I8gwos-hEfFrer7TV
Just like with insecure in the last step, all new Meteor apps start with the autopublish package. Let's remove it and see what happens:

meteor remove autopublish

When the app refreshes, the task list will be empty. Without the autopublish package, we will have to specify explicitly what the server sends to the client. The functions in Meteor that do this are Meteor.publish and Meteor.subscribe.

[ ] Install localmarket (https://www.meteor.com/tutorials/blaze/next-steps)


===========================================
PACKAGES

meteor add mquandalle:stylus
* http://stylus-lang.com/
* https://atmospherejs.com/mquandalle/stylus
* https://www.youtube.com/watch?v=3fcHsFBd_SY&list=PLLnpHn493BHECNl9I8gwos-hEfFrer7TV&index=10
* Changes style.css to style.styl

meteor add accounts-password accounts-ui
* https://atmospherejs.com/meteor/accounts-ui
* https://www.youtube.com/watch?v=-DfuBgPImZc&list=PLLnpHn493BHECNl9I8gwos-hEfFrer7TV&index=11&spfreload=1

meteor add accounts-twitter
* https://youtu.be/5xbpfTirLxw?list=PLLnpHn493BHECNl9I8gwos-hEfFrer7TV&t=54
* https://apps.twitter.com/app/12079673/keys
* To access registered users (not just those from Twitter)
Meteor.users.find()
Meteor.users.find().fetch()

meteor add accounts-facebook
* https://developers.facebook.com/apps/461688210693553/settings/basic/

meteor add accounts-google
* https://console.developers.google.com
* Client ID: 1015597026624-5ic7qpi76c5k18brd2f4d463892q77u2.apps.googleusercontent.com
* Client secret: 1ZRzaUk0Jw3qcbWNvqa7Mdsh
* https://www.youtube.com/watch?v=8Gk4u3zNtDk&list=PLLnpHn493BHECNl9I8gwos-hEfFrer7TV&index=14

meteor add accounts-github
* https://github.com/settings/applications/new
* https://github.com/settings/applications/320045
* Client ID: 0e7f43ca40494c680d3a
* Client Secret: 72e19d346e4d69dd593f17770367be5ffa1d12e5
* https://youtu.be/UT4l0CO5YJQ?list=PLLnpHn493BHECNl9I8gwos-hEfFrer7TV&t=60
http://localhost:3000/_oauth/github

meteor add reactive-var
Used for realtime search/filtering in lists

aldeed:simple-schema
https://atmospherejs.com/aldeed/simple-schema
A simple schema validation object with reactivity. Used by collection2 and autoform.

aldeed:collection2
Automatic validation of insert and update operations on the client and server.
https://atmospherejs.com/aldeed/collection2
https://github.com/aldeed/meteor-collection2
* This package requires and automatically installs the aldeed:simple-schema package, which defines the schema syntax and provides the validation logic.

meteor add kadira:debug
kadira:debug: Full Stack Debugging Solution for Meteor
https://kadira.io/platform/kadira-debug/overview
https://github.com/kadirahq/meteor-debug
Debug: http://debug.kadiraio.com/debug?page=debug

kadira:flow-router  added, version 2.12.1
reactive-dict       added, version 1.1.8
	kadira:flow-router: Carefully Designed Client Side Router for Meteor
kadira:blaze-layout  added, version 2.3.0
	kadira:blaze-layout: Layout Manager for Blaze (works well with FlowRouter)


https://github.com/okgrow/router-autoscroll
meteor add okgrow:router-autoscroll
Resolves (hopefully) annoying issue that long pages dont automatically load at the top (or correct element when using # anchors)




===========================================

Get OAuth user details:
Meteor.users.find().fetch()














